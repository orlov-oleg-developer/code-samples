// typograph.ts
const NBSP = "\u00A0";

// Базовый набор распространённых русских предлогов.
// Можно расширять по необходимости.
const DEFAULT_PREPOSITIONS: readonly string[] = [
  // 1–2 буквы + их варианты
  "в", "во",
  "к", "ко",
  "с", "со",
  "у",
  "о", "об", "обо",
  "от", "ото",
  "до",
  "из", "изо",
  "по",
  "на",
  "за",
  "без", "безо",
  "при",
  "про",
  "над", "надо",
  "под", "подо",
  "перед", "передо", "пред", "предо",

  // Часто используемые многобуквенные
  "между",
  "через",
  "сквозь",
  "среди",
  "около",
  "возле",
  "вокруг",
  "после",
  "для",
  "ради",
  "против",
  "близ",
  "внутри",
  "вне",
  "вроде",
  "насчет", "насчёт",
  "согласно",
  "благодаря",
  "вопреки",
  "вследствие",

  // Дефисные предлоги
  "из-за",
  "из-под",
] as const;

/**
 * Строит RegExp для замены пробела после предлога на NBSP.
 *
 * Правила:
 * - Левая граница — начало строки или символ, не являющийся буквой/цифрой/подчёркиванием.
 * - Матчится сам предлог (включая дефисные, напр. "из-за"/"из‑за").
 * - Далее один или несколько пробелов/табов (НЕ перенос строки).
 * - Взамен этих пробелов ставится NBSP.
 */
function buildPrepositionRegex(preps: readonly string[]): RegExp {
  // Сортируем по убыванию длины, чтобы длинные совпадения шли первыми (например, "безо" перед "без").
  const alternation = [...new Set(preps.map(p => p.trim()).filter(Boolean))]
    .sort((a, b) => b.length - a.length)
    // Разрешаем в дефисных предлогах как обычный дефис '-', так и неразрывный '‑' (U+2011).
    .map(p => p.replace(/-/g, "[-‑]"))
    .join("|");

  // Группа 1: начало строки или НЕ буква/цифра/подчёркивание
  // Группа 2: сам предлог
  // Группа 3: один или более пробелов/табов (НЕ \n)
  // Lookahead (?=\S) гарантирует, что дальше действительно идёт какой-то непустой символ (не пробел),
  // чтобы не заменять в конце строки "в    " на "в ".
  const pattern = String.raw`(^|[^\p{L}\p{N}_])(${alternation})([ \t]+)(?=\S)`;
  return new RegExp(pattern, "giu");
}

/**
 * Заменяет обычные пробелы после русских предлогов на NBSP.
 * - Не затрагивает переводы строк.
 * - Не трогает уже стоящие NBSP.
 * - Учитывает регистр (работает и для "В", и для "в").
 */
export function replaceSpacesAfterRussianPrepositions(
  input: string,
  prepositions: readonly string[] = DEFAULT_PREPOSITIONS
): string {
  if (!input) return input;
  const re = buildPrepositionRegex(prepositions);
  return input.replace(re, (_m, left: string, prep: string) => `${left}${prep}${NBSP}`);
}
